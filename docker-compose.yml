services:

  ollama:
    container_name: ollama
    restart: unless-stopped
    image: ollama/ollama:latest
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - "./data/ollama:/root/.ollama"
    ports:
      - 11434:11434
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ollama list || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - iadoc_network

  ollama-models-pull:
    container_name: ollama-models-pull
    image: curlimages/curl:latest
    command: >
      http://ollama:11434/api/pull -d '{"name":"llama3"}'
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    ports:
      - "3000:8080"
    expose:
      - 3000
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
    volumes:
      - ./data/open-webui:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network

  postgres_application:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: iadoc_application_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123456
      TZ: America/Sao_Paulo
    ports:
      - "5432:5432"
    expose:
      - 5432
    volumes: 
      - ./database/application_schema_and_data.sql:/docker-entrypoint-initdb.d/application_schema_and_data.sql
      #- pgdata_application:/var/lib/postgresql/data
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  postgres_document:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: iadoc_document_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123456
      TZ: America/Sao_Paulo
    ports:
      - "5433:5432"
    expose:
      - 5433
    volumes: 
      - ./database/document_schema_and_data.sql:/docker-entrypoint-initdb.d/document_schema_and_data.sql
      #- pgdata_document:/var/lib/postgresql/data
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  postgres_question:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: iadoc_question_db
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 123456
      TZ: America/Sao_Paulo
    ports:
      - "5434:5432"
    expose:
      - 5434
    volumes: 
      - ./database/question_schema_and_data.sql:/docker-entrypoint-initdb.d/question_schema_and_data.sql
      #- pgdata_question:/var/lib/postgresql/data
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"

  redis-stack:
    image: redis/redis-stack-server
    ports:
      - '6379:6379'
    expose:
      - 6379
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - redis-data:/data
    networks:
      - iadoc_network

  kafka:
    image: 'bitnami/kafka:latest'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - 9094:9094
    expose:
      - 9094
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - iadoc_network
  
  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:latest
    restart: always
    depends_on:
      - kafka
      - postgres_application
      - postgres_document
      - postgres_question
    ports:
      - 8083:8083
    expose:
      - 8083
    healthcheck:
      test: curl -f http://kafka-connect:8083/connectors || exit 1
      interval: 20s
      timeout: 50s
      retries: 10
      start_period: 10s
    networks:
      - iadoc_network
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars,/etc/kafka-connect/jars
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false
    command:
      - bash
      - -c
      - |
        echo "Installing Connector jdbc"
        confluent-hub install confluentinc/kafka-connect-jdbc:latest --no-prompt
        #
        echo "Installing Connector postgres"
        confluent-hub install debezium/debezium-connector-postgresql:latest --no-prompt
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity

  kafka-add-connectors:
    container_name: kafka-add-connectors
    image: curlimages/curl:latest
    volumes:
      - ./cdc/:/cdc
    command:
      - sh
      - -c
      - |
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/from_application.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/to_document_documents.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/from_basic_application.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/to_question_documents.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/to_question_questions.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/from_document_documents.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/from_question_questions.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/to_application_documents.json &&
        sleep 1 &&
        curl http://kafka-connect:8083/connectors -H "Content-Type:application/json; charset=utf-8" -d @/cdc/to_application_questions.json 
    depends_on:
      kafka-connect:
        condition: service_healthy
    networks:
      - iadoc_network

  minio:
    image: docker.io/bitnami/minio:latest
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=iadoc-bucket
    volumes:
      - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001 #REMOVER
    expose:
      - 9001 #REMOVER
    depends_on:
      kafka-connect:
        condition: service_healthy
    networks:
      - iadoc_network

  microservice-discovery:
    image: halissonmartins/microservice-discovery:0.0.1.12-SNAPSHOT
    ports:
      - 8761:8761
    expose:
      - 8761 #REMOVER
    environment:
      TZ: America/Sao_Paulo
#    healthcheck:
#      test: curl -f http://microservice-discovery:8761/actuator/info || exit 1
#      interval: 10s
#      timeout: 10s
#      retries: 10
#      start_period: 10s
    depends_on:
      kafka-connect:
        condition: service_healthy
    networks:
      - iadoc_network

  api-gateway:
    image: halissonmartins/microservice-api-gateway:0.0.1.11-SNAPSHOT
    restart: always
    ports:
      - 8500:8500
    expose:
      - 8500
    depends_on:
      - microservice-discovery
#      microservice-discovery:
#        condition: service_healthy
    environment:
      TZ: America/Sao_Paulo
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://microservice-discovery:8761/eureka
    networks:
      - iadoc_network

  microservice-application:
    image: halissonmartins/microservice-application:0.0.1.12-SNAPSHOT
    restart: always
 #   healthcheck:
 #     test: curl -f http://api-gateway:8500/app/actuator/info || exit 1
 #     interval: 10s
 #     timeout: 10s
 #     retries: 10
 #     start_period: 10s
    depends_on:
      - api-gateway
    environment:
      TZ: America/Sao_Paulo
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://microservice-discovery:8761/eureka
      SPRING.DATASOURCE.URL: jdbc:postgresql://postgres_application:5432/iadoc_application_db
      UPLOAD_RECEIVED_DIR: /app/documents/received
      MINIO.ACCESS.KEY: minioadmin
      MINIO.SECRET.KEY: minioadmin
      MINIO.URL: http://minio:9000
      MINIO.BUCKET.NAME: iadoc-bucket
    networks:
      - iadoc_network

  microservice-document-processor:
    image: halissonmartins/microservice-document-processor:0.0.1.12-SNAPSHOT
    restart: always
    depends_on:
      - microservice-application
#      microservice-application:
#        condition: service_healthy
    environment:
      TZ: America/Sao_Paulo
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://microservice-discovery:8761/eureka
      SPRING.DATASOURCE.URL: jdbc:postgresql://postgres_document:5432/iadoc_document_db #Dentro do docker precisar usar a porta interna
      SPRING.DATA.REDIS.HOST: redis-stack
      SPRING.DATA.REDIS.PORT: 6379
      SPRING.AI.OLLAMA.BASE-URL: http://ollama:11434
      UPLOAD_RECEIVED_DIR: /app/documents/received
      MINIO.ACCESS.KEY: minioadmin
      MINIO.SECRET.KEY: minioadmin
      MINIO.URL: http://minio:9000
      MINIO.BUCKET.NAME: iadoc-bucket
    networks:
      - iadoc_network

  microservice-question-processor:
    image: halissonmartins/microservice-question-processor:0.0.1.12-SNAPSHOT
    restart: always
    depends_on:
      - microservice-application
#      microservice-application:
#        condition: service_healthy
    environment:
      TZ: America/Sao_Paulo
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://microservice-discovery:8761/eureka
      SPRING.DATASOURCE.URL: jdbc:postgresql://postgres_question:5432/iadoc_question_db #Dentro do docker precisar usar a porta interna
      SPRING.DATA.REDIS.HOST: redis-stack
      SPRING.DATA.REDIS.PORT: 6379
      SPRING.AI.OLLAMA.BASE-URL: http://ollama:11434
    networks:
      - iadoc_network

networks:
  iadoc_network:

volumes:
  #pgdata_application:
  #pgdata_document:
  #pgdata_question:
  redis-data:
  minio_data: